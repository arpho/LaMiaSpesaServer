{ req: 
   { domain: null,
     _events: { drain: [Function], error: [Function], response: [Function] },
     _maxListeners: 10,
     output: [],
     outputEncodings: [],
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: false,
     sendDate: false,
     _headerSent: true,
     _header: 'GET /login HTTP/1.1\r\nHost: localhost:8080\r\naccept-encoding: gzip, deflate\r\nCookie: \r\nConnection: close\r\n\r\n',
     _hasBody: true,
     _trailer: '',
     finished: true,
     _hangupClose: false,
     socket: 
      { _connecting: false,
        _handle: null,
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: [Object],
        _maxListeners: 10,
        _writableState: [Object],
        writable: false,
        allowHalfOpen: false,
        onend: null,
        destroyed: true,
        errorEmitted: false,
        bytesRead: 1477,
        _bytesDispatched: 106,
        _pendingData: null,
        _pendingEncoding: '',
        parser: null,
        _httpMessage: [Circular],
        ondata: null,
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1 },
     connection: 
      { _connecting: false,
        _handle: null,
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: [Object],
        _maxListeners: 10,
        _writableState: [Object],
        writable: false,
        allowHalfOpen: false,
        onend: null,
        destroyed: true,
        errorEmitted: false,
        bytesRead: 1477,
        _bytesDispatched: 106,
        _pendingData: null,
        _pendingEncoding: '',
        parser: null,
        _httpMessage: [Circular],
        ondata: null,
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1 },
     agent: false,
     socketPath: undefined,
     method: 'GET',
     path: '/login',
     _headers: 
      { host: 'localhost:8080',
        'accept-encoding': 'gzip, deflate',
        cookie: '' },
     _headerNames: 
      { host: 'Host',
        'accept-encoding': 'accept-encoding',
        cookie: 'Cookie' },
     parser: null,
     res: 
      { _readableState: [Object],
        readable: false,
        domain: null,
        _events: [Object],
        _maxListeners: 10,
        socket: [Object],
        connection: [Object],
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        trailers: {},
        _pendings: [],
        _pendingIndex: 0,
        url: '',
        method: null,
        statusCode: 200,
        client: [Object],
        _consuming: true,
        _dumped: false,
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        upgrade: false,
        req: [Circular],
        text: '<!-- views/login.ejs -->\n<!doctype html>\n<html>\n<head>\n\t<title>Node Authentication</title>\n\t<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css"> <!-- load bootstrap css -->\n\t<link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css"> <!-- load fontawesome -->\n\t<style>\n\t\tbody \t\t{ padding-top:80px; }\n\t</style>\n</head>\n<body>\n<div class="container">\n\n<div class="col-sm-6 col-sm-offset-3">\n\n\t<h1><span class="fa fa-sign-in"></span> Login</h1>\n\n\t<!-- show any messages that come back with authentication -->\n\t\n\t\t<div class="alert alert-danger">introduci le tue credenziali</div>\n\t\n\n\t<!-- LOGIN FORM -->\n\t<form action="/login" method="post">\n\t\t<div class="form-group">\n\t\t\t<label>Email</label>\n\t\t\t<input type="text" class="form-control" name="email">\n\t\t</div>\n\t\t<div class="form-group">\n\t\t\t<label>Password</label>\n\t\t\t<input type="password" class="form-control" name="password">\n\t\t</div>\n\n\t\t<button type="submit" class="btn btn-warning btn-lg">Login</button>\n\t</form>\n\n\t<hr>\n\n\t<p>Need an account? <a href="/signup">Signup</a></p>\n\t<p>Or go <a href="/">home</a>.</p>\n\n</div>\n\n</div>\n</body>\n</html>\n',
        pipe: [Function],
        addListener: [Function],
        on: [Function],
        pause: [Function],
        resume: [Function],
        read: [Function],
        body: undefined } },
  res: 
   { _readableState: 
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: true,
        endEmitted: true,
        reading: false,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: [Object],
        encoding: 'utf8' },
     readable: false,
     domain: null,
     _events: 
      { end: [Object],
        data: [Object],
        readable: [Function],
        close: [Function],
        error: [Function] },
     _maxListeners: 10,
     socket: 
      { _connecting: false,
        _handle: null,
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: [Object],
        _maxListeners: 10,
        _writableState: [Object],
        writable: false,
        allowHalfOpen: false,
        onend: null,
        destroyed: true,
        errorEmitted: false,
        bytesRead: 1477,
        _bytesDispatched: 106,
        _pendingData: null,
        _pendingEncoding: '',
        parser: null,
        _httpMessage: [Object],
        ondata: null,
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1 },
     connection: 
      { _connecting: false,
        _handle: null,
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: [Object],
        _maxListeners: 10,
        _writableState: [Object],
        writable: false,
        allowHalfOpen: false,
        onend: null,
        destroyed: true,
        errorEmitted: false,
        bytesRead: 1477,
        _bytesDispatched: 106,
        _pendingData: null,
        _pendingEncoding: '',
        parser: null,
        _httpMessage: [Object],
        ondata: null,
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1 },
     httpVersion: '1.1',
     complete: true,
     headers: 
      { 'x-powered-by': 'Express',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '1176',
        etag: '"-1955192620"',
        'set-cookie': [Object],
        date: 'Thu, 08 May 2014 09:29:40 GMT',
        connection: 'close' },
     trailers: {},
     _pendings: [],
     _pendingIndex: 0,
     url: '',
     method: null,
     statusCode: 200,
     client: 
      { _connecting: false,
        _handle: null,
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: [Object],
        _maxListeners: 10,
        _writableState: [Object],
        writable: false,
        allowHalfOpen: false,
        onend: null,
        destroyed: true,
        errorEmitted: false,
        bytesRead: 1477,
        _bytesDispatched: 106,
        _pendingData: null,
        _pendingEncoding: '',
        parser: null,
        _httpMessage: [Object],
        ondata: null,
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1 },
     _consuming: true,
     _dumped: false,
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     upgrade: false,
     req: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        output: [],
        outputEncodings: [],
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _headerSent: true,
        _header: 'GET /login HTTP/1.1\r\nHost: localhost:8080\r\naccept-encoding: gzip, deflate\r\nCookie: \r\nConnection: close\r\n\r\n',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _hangupClose: false,
        socket: [Object],
        connection: [Object],
        agent: false,
        socketPath: undefined,
        method: 'GET',
        path: '/login',
        _headers: [Object],
        _headerNames: [Object],
        parser: null,
        res: [Circular] },
     text: '<!-- views/login.ejs -->\n<!doctype html>\n<html>\n<head>\n\t<title>Node Authentication</title>\n\t<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css"> <!-- load bootstrap css -->\n\t<link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css"> <!-- load fontawesome -->\n\t<style>\n\t\tbody \t\t{ padding-top:80px; }\n\t</style>\n</head>\n<body>\n<div class="container">\n\n<div class="col-sm-6 col-sm-offset-3">\n\n\t<h1><span class="fa fa-sign-in"></span> Login</h1>\n\n\t<!-- show any messages that come back with authentication -->\n\t\n\t\t<div class="alert alert-danger">introduci le tue credenziali</div>\n\t\n\n\t<!-- LOGIN FORM -->\n\t<form action="/login" method="post">\n\t\t<div class="form-group">\n\t\t\t<label>Email</label>\n\t\t\t<input type="text" class="form-control" name="email">\n\t\t</div>\n\t\t<div class="form-group">\n\t\t\t<label>Password</label>\n\t\t\t<input type="password" class="form-control" name="password">\n\t\t</div>\n\n\t\t<button type="submit" class="btn btn-warning btn-lg">Login</button>\n\t</form>\n\n\t<hr>\n\n\t<p>Need an account? <a href="/signup">Signup</a></p>\n\t<p>Or go <a href="/">home</a>.</p>\n\n</div>\n\n</div>\n</body>\n</html>\n',
     pipe: [Function],
     addListener: [Function],
     on: [Function],
     pause: [Function],
     resume: [Function],
     read: [Function],
     body: undefined },
  links: {},
  text: '<!-- views/login.ejs -->\n<!doctype html>\n<html>\n<head>\n\t<title>Node Authentication</title>\n\t<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css"> <!-- load bootstrap css -->\n\t<link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css"> <!-- load fontawesome -->\n\t<style>\n\t\tbody \t\t{ padding-top:80px; }\n\t</style>\n</head>\n<body>\n<div class="container">\n\n<div class="col-sm-6 col-sm-offset-3">\n\n\t<h1><span class="fa fa-sign-in"></span> Login</h1>\n\n\t<!-- show any messages that come back with authentication -->\n\t\n\t\t<div class="alert alert-danger">introduci le tue credenziali</div>\n\t\n\n\t<!-- LOGIN FORM -->\n\t<form action="/login" method="post">\n\t\t<div class="form-group">\n\t\t\t<label>Email</label>\n\t\t\t<input type="text" class="form-control" name="email">\n\t\t</div>\n\t\t<div class="form-group">\n\t\t\t<label>Password</label>\n\t\t\t<input type="password" class="form-control" name="password">\n\t\t</div>\n\n\t\t<button type="submit" class="btn btn-warning btn-lg">Login</button>\n\t</form>\n\n\t<hr>\n\n\t<p>Need an account? <a href="/signup">Signup</a></p>\n\t<p>Or go <a href="/">home</a>.</p>\n\n</div>\n\n</div>\n</body>\n</html>\n',
  body: {},
  files: {},
  buffered: true,
  headers: 
   { 'x-powered-by': 'Express',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '1176',
     etag: '"-1955192620"',
     'set-cookie': [ 'connect.sid=s%3APlxVQrLOkByNUiyIspdXZ9fN.wQMl93G53gjUEeWM%2FrdJU0Zl7HSX%2BqOoEHupvNHRTtQ; Path=/; HttpOnly' ],
     date: 'Thu, 08 May 2014 09:29:40 GMT',
     connection: 'close' },
  header: 
   { 'x-powered-by': 'Express',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '1176',
     etag: '"-1955192620"',
     'set-cookie': [ 'connect.sid=s%3APlxVQrLOkByNUiyIspdXZ9fN.wQMl93G53gjUEeWM%2FrdJU0Zl7HSX%2BqOoEHupvNHRTtQ; Path=/; HttpOnly' ],
     date: 'Thu, 08 May 2014 09:29:40 GMT',
     connection: 'close' },
  statusCode: 200,
  status: 200,
  statusType: 2,
  info: false,
  ok: true,
  redirect: false,
  clientError: false,
  serverError: false,
  error: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: false,
  charset: 'utf-8',
  type: 'text/html',
  setEncoding: [Function],
  redirects: [ 'http://localhost:8080/login' ] }
